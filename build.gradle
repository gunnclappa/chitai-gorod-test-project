plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.10.0'
    id 'io.freefair.lombok' version '6.0.0-m2'
}

allure {
    report {
        version.set('2.19.0')
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set('2.19.0')
            }
        }
    }
}

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation(
            'org.junit.jupiter:junit-jupiter:5.9.0',
            'com.codeborne:selenide:6.10.1',
            'io.qameta.allure:allure-selenide:2.20.0',
            'org.slf4j:slf4j-simple:2.0.5',
            'org.aeonbits.owner:owner:1.0.12',
            'org.aspectj:aspectjweaver:1.9.9.1',
            'io.rest-assured:rest-assured:5.3.0',
            'io.qameta.allure:allure-rest-assured:2.20.0',
            'org.assertj:assertj-core:3.23.1',
            'com.github.javafaker:javafaker:1.0.2',
            'org.junit.platform:junit-platform-engine:1.9.1',
            'io.appium:java-client:8.2.1',
            'org.projectlombok:lombok:1.18.24'
    )
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        if (System.getProperty("tag") != null && !System.getProperty("tag").isEmpty()) {
            includeTags System.getProperty("tag")
        }
    }
    if (System.getProperty("tag") == "UI" && System.getProperty("env") == "local") {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'             : true,
                'junit.jupiter.execution.parallel.mode.default'        : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default': 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'     : 'custom',
                'junit.jupiter.execution.parallel.config.custom.class' : 'chitaigorod.helpers.CustomStrategy'
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}